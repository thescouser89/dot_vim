" Detecting file types
" Result is that when a file is edited its plugin file is loaded (if detected)
filetype plugin on
" Loading the indent file for specific file types
" Result is that when a file is edited its indent file is loaded
filetype indent on

" Uses indent form previous line for a newly created file
"
" autoindent does nothing more than copy the indentation of the previous line,
" when starting a new line
set autoindent

" smartindent automatically inserts one extra level of indentation is some
" cases, and works for C-like files.
set smartindent

" cindent is more customizable, but also more strict when it comes to syntax
" When it comes to C and C++, file type based indentations automatillcay sets
" cindent and for that reason, there is no need to set cindent manually for
" such files
"
" set cident

" This setting is used for indentation purely with hard tabs

" tabstop	: changes the width of the TAB character
" shiftwidth: affects what happens when you press >>, << or ==. It also
" affects how automatic indentation works
" set tabstop=4
" set shiftwidth=4

" For indentation without hard tabs - spaces are introduced instead of tabs
" To reinsert tabs while edting, then use that command: set expandtab!
" Use:
set expandtab
set shiftwidth=4
set softtabstop=4

" expandtab affects what happens when you press the <TAB> key. If set,
" pressing the <TAB> key will always insert 'softtabstop' amount of space
" characters. Otherwise the amount of spaces inserted is minimized by using
" TAB characters.

" it can reduce the need for %, the cursor will briefly jump to the matching
" brace when you insert one
set showmatch

" Always show current position
set ruler

" Vim display the match while you are typing it
set incsearch

" Highlighting matches
" set hlsearch

" Ignore case when doing search
set ignorecase

" if search pattern pattern contains upper-case characters, then vim will
" assume that you want a case-sensitive search and will do its matching
" accordingly
set smartcase

" Function keys that start with an <Esc> are recognized in Insert mode
set esckeys

" To be able to see what mode you are in
set showmode

" Show numbers
set nu

" Show numbers relative to the cursor
" set rnu

" Colorscheme
colorscheme desert

" Not vi compatible
set nocompatible

" Syntax Highlighting On
syn on

" Minimal number of screen lines to keep above and below the cursor
" default is off or scrolloff=0
set scrolloff=2

" This will enables a menu at the bottom of the vim window
set wildmenu

" Get name file as bash title
set title

" wildmode enable autocompletion of commands; when in command mode press :spe
" and the <TAB> - first tab a list of completions will be shown and the
" command will be completed to the longest common commandl
" 				- second tab the wildmenu will show up witha ll the
" 				completions that were listed before
set wildmode=list:longest,full

" To enable full mouse support in the console
" Have full mouse, scroll, wheel support
" set mouse=a


set list listchars=tab:>·,trail:·,extends:>,precedes:<

" To map type: map Q :wq
" :map to see your current mappings

"Folding
" set foldmethod=syntax
" set foldcolumn=3
" set foldlevelstart=99
" highlight Folded ctermbg=darkgrey ctermfg=grey
" highlight FoldColumn ctermbg=darkgrey ctermfg=grey
" nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>
"

" To get the indent lines
"au VimEnter * :IndentGuidesEnable
"let g:indent_guides_guide_size=1
"let g:indent_guides_auto_colors =0
"let g:indent_guides_color_change_percent=5
"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd guibg=red ctermbg=black
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=magenta

map  <C-l> :tabn<CR>
map  <C-h> :tabp<CR>
map  <C-n> :tabnew<CR>
" :map and :noremap are recursive and non-recursive versions of the various
" mapping commands.
"
" To delete trailing whitespace
nnoremap ds :s/\s*$//g<cr>:noh<cr>

" Taglist plugin
" toggle taglist window
nnoremap <silent> <F2> :TlistToggle<CR>

" <Space>       Display the prototype of the tag under the cursor.
let Tlist_GainFocus_On_ToggleOpen = 1
let Tlist_Close_On_Select = 1
nnoremap <silent> <F3> :TlistShowPrototype<CR>

" NerdTree plugin
" toggle NerdTree
nnoremap <silent> <F4> :NERDTreeToggle<CR>
" t   Open selected node/bookmark in a new tab

" AutoComplPop plugin
" Added the snippet in the doc to snipMate
nnoremap <F8> :AcpDisable<CR>
nnoremap <F9> :AcpEnable<CR>
" for snipMate support
"
" There is the restriction on this auto-popup, that the word before cursor
" must consist only of uppercase characters.
let g:acp_behaviorSnipmateLength = 1

" To highlight text that is above the 80 character limit
highlight OverLength ctermbg=blue ctermfg=white guibg=#592929
match OverLength /\%>80v.\+/

" the menu color
hi Pmenu ctermfg=white ctermbg=darkgrey guibg=#444444

" the menu slected color
hi PmenuSel ctermfg=white ctermbg=darkblue guibg=#555555 guifg=#ffffff

" for omnicompletion in vim...
" set ofu=syntaxcomplete#Complete

" VJDE plugin: Used for C and Java completions
" autocompletion with C-X X-U

" set cfu=VjdeCompletionFun

" :[range]call Vjde_sort_import()
" to sort import

" Set classpath
" let g:vjde_lib_path="lib/j2ee.jar:lib/struts.jar:build/classes"
" Use that if you want to run a color test
" :runtime syntax/colortest.vim

" To match more stuff with %
runtime macros/matchit.vim

let mapleader = "_"

" Used with tasklist
map <F5> <Leader>t

" supertab messes with auto-pairs
"
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" wrap around: t is in formatoptions to wrap code and not just comments
set fo+=t 

" text width
set tw=80

"Mark the lines you want to wrap (with Shift-V or any other of the
"v-commands), then type "!fmt<CR>" 
"
" for taglist support of latex. Note that you need to add a ~/.ctags
let tlist_tex_settings = 'latex;l:labels;s:sections;t:subsections;u:subsubsections'
set iskeyword=@,48-57,_,-,:,192-255
